
int screen;
boolean p1selection = false;
boolean p2selection = false;
int turno;
int vidap1;
int vidap2;
int p1seleccionado;
int p2seleccionado;


AGI p1;
AGI p2;
AGI p3;
AGI p4;
AGI p5;
AGI p6;

AGI p1b;
AGI p2b;
AGI p3b;
AGI p4b;
AGI p5b;
AGI p6b;

AGI j1;
AGI j2;
void setup() {

  size(500, 500);
  p1 = new AGI("WATSON", 12, round(random(1,3)), 0);
  p2 = new AGI("DEEPMIND", 13, round(random(1,3)), 1);
  p3 = new AGI("THAISUN", 12, round(random(1,3)), 2);
  p4 = new AGI("RRPRS", 13, round(random(1,3)), 3);
  p5 = new AGI("JAPAN", 12, round(random(1,3)), 4);
  p6 = new AGI("AUTOML", 13, round(random(1,3)), 5);

  p1b = new AGI("WATSON", 12, round(random(1,3)), 0);
  p2b = new AGI("DEEPMIND", 13, round(random(1,3)), 1);
  p3b = new AGI("THAISUN", 12, round(random(1,3)), 2);
  p4b = new AGI("RRPRS", 13, round(random(1,3)), 3);
  p5b = new AGI("JAPAN", 12, round(random(1,3)), 4);
  p6b = new AGI("AUTOML", 13, round(random(1,3)), 5);
}
void draw() {
  background(0);
  switch(screen) {
  case 0:
    intro();
    break;
  case 1:
    instruccion();
    break;
  case 2:
    selection();
    break;
  case 3:
    juego();
    break;
  case 4:
    fin();
    break;
  } 
  println(screen);
}
void AGI1(){

  fill(0,0,255);
  noStroke();
  pushMatrix();
  rotate(-.5);
  ellipse(5,35,7,30);
  popMatrix();
  pushMatrix();
  rotate(-.2);
  ellipse(35,25,7,30);
  popMatrix();
  pushMatrix();
  rotate(0);
  ellipse(58,15,7,30);
  popMatrix();
  pushMatrix();
  rotate(.2);
  ellipse(80,5,7,30);
  popMatrix();
  pushMatrix();
  rotate(.5);
  ellipse(100,-20,7,30);
  popMatrix();
  noFill();
  stroke(0,0,255);
  strokeWeight(3);
  ellipse(58,70,65,65);
  bezier(35,85,75,100,120,65,70,50);
  bezier(45,55,75,20,110,120,35,92);
  bezier(30,55,85,5,115,120,35,92);
  bezier(30,55,25,95,75,90,85,75);
  fill(0,0,255);

}

void AGI2(){

  fill(116,166,245);
  arc(50, 60, 75, 75, QUARTER_PI, PI+TWO_PI);
  fill(45,97,178);
  arc(50,60, 75, 75, 0, PI+QUARTER_PI, PIE);
  fill(0);
  strokeWeight(3);
  ellipse(50,60,35,35);

}
void AGI3(){

  stroke(255,255,0);
  fill(255,255,0);
  ellipse(20,30,20,20);
  pushMatrix();
  rotate(.9);
  ellipse(60,25,10,40);
  popMatrix();
  ellipse(28,78,10,50);
  noFill();
  strokeWeight(4);
  bezier(25,60,-10,90,35,100,50,70);
  fill(255,255,0);
  ellipse(45,70,7,35);
  ellipse(60,70,8,110);
  ellipse(60,22,14,15);
  ellipse(60,65,17,9);
  noFill();
  strokeWeight(6);
  bezier(52,50,95,17,80,85,52,80);
  strokeWeight(1);

}
void AGI4(){
  stroke(255,0,0);
  noFill();
  strokeWeight(7);
  line(40,10,30,40);
  line(35,25,90,25);
  line(35,55,90,55);
  line(25,80,100,80);
  line(63,10,63,80);

}
void AGI5(){
   fill(255);
  noStroke();
  rect(70,60,95,60);
  stroke(105,105,205);
  noFill();
  strokeWeight(7);
  line(20,80,20,30);
  line(20,30,35,30);
  line(35,30,35,80);
  fill(105,105,205);
  line(60,30,60,60);
  line(60,30,50,30);
  line(50,30,45,30);
  line(45,30,45,50);
  line(45,50,50,45);
  line(57,45,45,60);
  textSize(30);
  text("RN",65,60);
  textSize(20);
  text("008",60,80);
}
void AGI6(){
  noFill();
  stroke(255);
  rect(45,50,105,60);
  noFill();
  strokeWeight(7);
  line(20,80,45,20);
  line(65,20,65,80);
  line(35,60,50,60);
  textSize(35);
  text("ML",58,65);
  rect(55,80,80,30); 
}
void intro() {
  background(0);
  textSize(50);
  text("AGI-linetion",100,200);
  textSize(25);
  stroke(2);
  text("Preiona para continuar '0'",100,450);
  keyPressed();
  if (key == '0') {
    screen = 1;
  }
}
void instruccion() {
  textSize(25);
  text("Ahora Elige tus personajes:",100,100);
   text("Jugador1 Elige personaje con 'q' 'w' 'e' 'r' 't' 'y'",10,160);
   text("Jugador2 Elige personaje con 'a' 's' 'd' 'f' 'g' 'h'",10,210);
   textSize(18);
   text("Presiona '9' para pasar a selecciÃ³n.",100,260);
  textSize(40);
  text("Jugador1 Ataca con 'z'",50,300);
  text("Jugador2 Ataca con 'm'",50,360);
  keyPressed();
  if (key == '9') {
    screen = 2;
  }
}
void selection() {
  background(0);
  pushMatrix();
  p1.display();
  translate(0,0);
  popMatrix();
  pushMatrix();
  p2.display();
  translate(0,0);
  popMatrix();
  pushMatrix();
  p3.display();
  translate(0,0);
  popMatrix();
  pushMatrix();
  p4.display();
  translate(0,0);
  popMatrix();
  pushMatrix();
  p5.display();
  translate(0,0);
  popMatrix();
  pushMatrix();
  p6.display();
  translate(0,0);
  popMatrix();
  if (p1selection && p2selection) {
    screen = 3;
    turno = round(random(1,2));
  }
  if (keyPressed) {
    switch(key) {
    case 'q':
      j1 = p1;
      vidap1=j1.hp;
      p1selection = true;
      break;
    case 'w':
      j1 = p2;
      vidap1=j1.hp;
      p1selection = true;
      break;
    case 'e':
      j1 = p3;
      vidap1=j1.hp;
      p1selection = true;
      break;
    case 'r':
      j1 = p4;
      vidap1=j1.hp;
      p1selection = true;
      break;
    case 't':
      j1 = p5;
      vidap1=j1.hp;
      p1selection = true;
      break;
    case 'y':
      j1 = p6;
      vidap1=j1.hp;
      p1selection = true;
      break;
    case 'a':
      j2 = p1b;
      vidap2=j2.hp;
      p2selection = true;
      break;
    case 's':
      j2 = p2b;
      vidap2=j2.hp;
      p2selection = true;
      break;
    case 'd':
      j2 = p3b;
      vidap2=j2.hp;
      p2selection = true;
      break;
    case 'f':
      j2 = p4b;
      vidap2=j2.hp;
      p2selection = true;
      break; 
    case 'g':
      j2 = p5b;
      vidap2=j2.hp;
      p2selection = true;
      break;
    case 'h':
      j2 = p6b;
      vidap2=j2.hp;
      p2selection = true;
      break;
    }
  }
}
/*void mouseReleased() {
  if (screen==2){
  if (mouseX>=50 && mouseX<=230&&mouseY>=100 && mouseY<=300 && p1selection==false){
      j1 = p1;
      vidap1=j1.hp;
      p1selection = true;
    }
  if (mouseX>=50 && mouseX<=230&&mouseY>=100 && mouseY<=300 && p1selection==true){
        j2 = p1b;
        vidap2=j2.hp;
        p2selection = true;
    }
  if (mouseX>=230&&mouseX<=380&&mouseY>=100&&mouseY<=300 && p1selection==false){
      j1 = p2;
      vidap1=j1.hp;
      p1selection = true;
  }
  if (mouseX>=230&&mouseX<=380&&mouseY>=100&&mouseY<=300 && p1selection==true){
        j2 = p2b;
        vidap2=j2.hp;
        p2selection = true;
  }
  if (mouseX>=380){
    if(mouseY>=100&&mouseY<=300 &&p1selection==false){
      j1 = p3;
      vidap1=j1.hp;
      p1selection = true;
      if (mouseX>=380){
        if(mouseY>=100&&mouseY<=300 &&p1selection==true){
        j2 = p3b;
        vidap2=j2.hp;
        p2selection = true;
        }
      }
      }
    }    
  if (mouseX>=50 && mouseX<=230){
    if(mouseY>=300&&p1selection==false){
      j1 = p4;
      vidap1=j1.hp;
      p1selection = true;
      if (mouseX>=50 && mouseX<=230){
        if(mouseY>=300&&p1selection==false){
        j2 = p4b;
        vidap2=j2.hp;
        p2selection = true;
        }
      }
      }
    }
  if (mouseX>=230&&mouseX<=380){
   if(mouseY>=300&&p1selection==false){
      j1 = p5;
      vidap1=j1.hp;
      p1selection = true;
      if (mouseX>=230&&mouseX<=380){
       if(mouseY>=300&&p1selection==true){
        j2 = p5b;
        vidap2=j2.hp;
        p2selection = true;
       }
      }
      }
   }
  if (mouseX>=380){
    if(mouseY>=300&&p1selection==false){
      j1 = p6;
      vidap1=j1.hp;
      p1selection = true;
      if (mouseX>=380){
        if(mouseY>=300&&p1selection==true){
        j2 = p6b;
        vidap2=j2.hp;
        p2selection = true;
      }
    }    
  }
  }
  }
}*/
void juego() {
  textSize(15);
  text("Jugador1 Ataca con 'Z'     Jugador2 Ataca con 'M'",50,200);
  textSize(15);
  if (turno==1){
    text("Turno el Jugador 1",150,40);
  }if(turno==2){
  text("Turno el Jugador 2",150,40);
  }
  if (j1==p1) {
    p1seleccionado=0;
    p1.jugando();
  }
  if (j1==p2) {
    p1seleccionado=1;
    p2.jugando();
  }
  if (j1==p3) {
    p1seleccionado=2;
    p3.jugando();
  }
  if (j1==p4) {
    p1seleccionado=3;
    p4.jugando();
  }
  if(j1==p5){
    p1seleccionado=4;
    p5.jugando();
  }
  if(j1==p6){
    p1seleccionado=5;
    p6.jugando();
  }
    if (j2==p1b) {
    p2seleccionado=0;
    p1.p2jugando();
  }
  if (j2==p2b) {
    p2seleccionado=1;
    p2.p2jugando();
  }
  if (j2==p3b) {
    p2seleccionado=2;
    p3.p2jugando();
  }
  if (j2==p4b) {
    p2seleccionado=3;
    p4.p2jugando();
  }
  if(j2==p5b){
    p2seleccionado=4;
    p5.p2jugando();
  }
  if(j2==p6b){
    p2seleccionado=5;
    p6.p2jugando();
  }
  if (vidap1 <= 0 || vidap2<=0) {
    screen =4;
  }
  switch (turno) {
  case 1:
    keyPressed();
    if ((key=='z') || (key == 'Z') ) {
      vidap2 -= j1.ataque;
      turno = 2;
    }
    break;
  case 2:
    keyPressed();
    if ((key=='m') || (key == 'M') ) {
      vidap1 -= j2.ataque;
      turno = 1;
    }
    break;
  }
  pushMatrix();
  fill(0,255,0);
  rect(50,50, (vidap1*15),40);
  popMatrix();
  
  pushMatrix();
  fill(0,255,0);
  rect(450,50, (vidap2*15),40);
  popMatrix();  
}
void fin() {
  background(0);
  if (vidap1<=0){
    textSize(15);
    text("GANA JUGADOR 2",90,200);
    text("Presiona '1' para volver al inicio.",100,250);
  }else if(vidap2<=0){
    textSize(15);
    text("GANA JUGADOR 1",90,200);
    text("Presiona '1' para volver al inicio.",100,250);
  }
  keyPressed();
  if (key == '1') {
    fill(255);
    screen = 0;
    p1selection = false;
    p2selection = false;
    turno = 0;
  }
}
class AGI {
  String nombre;
  int hp;
  int ataque;
  int tipo;
  AGI(String nombre_, int hp_, int ataque_, int tipo_) {
    nombre =nombre_;
    hp = hp_;
    ataque = ataque_;
    tipo = tipo_;
  }
  void display() {
    textSize(15);
   text("Jugador1 Elige personaje con 'q' 'w' 'e' 'r' 't' 'y'",140,10);
   text("Jugador2 Elige personaje con 'a' 's' 'd' 'f' 'g' 'h'",140,30);
    switch(tipo) {
    case 0:
      pushMatrix();
      rectMode(CENTER);
      translate(50, 100);
      AGI1();
      popMatrix();
      break;
    case 1:
      pushMatrix();
      rectMode(CENTER);
      translate(230, 100);
      AGI2();
      popMatrix();
      break;
    case 2:
      pushMatrix();
      rectMode(CENTER);
      translate(380, 100);
      AGI3();
      popMatrix();
      break;
    case 3:
      pushMatrix();
      rectMode(CENTER);
      translate(50, 300);
      AGI4();
      popMatrix();
      break;
    case 4:
      pushMatrix();
      rectMode(CENTER);
      translate(230, 300);
      AGI5();
      popMatrix();
      break;
    case 5:
      pushMatrix();
      rectMode(CENTER);
      translate(380, 300);
      AGI6();
      popMatrix();
      break;
    }
  }  
  void jugando(){
      switch(p1seleccionado){
        case 0:
      pushMatrix();
      rectMode(CENTER);
      translate(80, 300);
      AGI1();
      popMatrix();
      break;
      
      case 1:
      pushMatrix();
      rectMode(CENTER);
      translate(80, 300);
      AGI2();
      popMatrix();
      break;
      
      case 2:
      pushMatrix();
      rectMode(CENTER);
      translate(80, 300);
      AGI3();
      popMatrix();
      break;
      
      case 3:
      pushMatrix();
      rectMode(CENTER);
      translate(80, 300);
      AGI4();
      popMatrix();
      break;
      
      case 4:
      pushMatrix();
      rectMode(CENTER);
      translate(80, 300);
      AGI5();
      popMatrix();
      break;
      
      case 5:
      pushMatrix();
      rectMode(CENTER);
      translate(80, 300);
      AGI6();
      popMatrix();
      break;    
      }
  }
  void p2jugando(){ 
      switch(p2seleccionado){
        case 0:
      pushMatrix();
      rectMode(CENTER);
      translate(300, 300);
      AGI1();
      popMatrix();
      break;
 
      case 1:
      pushMatrix();
      rectMode(CENTER);
      translate(300, 300);
      AGI2();
      popMatrix();
      break;
      
      case 2:
      pushMatrix();
      rectMode(CENTER);
      translate(300, 300);
      AGI3();
      popMatrix();
      break;
      
      case 3:
      pushMatrix();
      rectMode(CENTER);
      translate(300, 300);
      AGI4();
      popMatrix();
      break;
      
      case 4:
      pushMatrix();
      rectMode(CENTER);      
      translate(300, 300);
      AGI5();
      popMatrix();
      break;
      
      case 5:
      pushMatrix();
      rectMode(CENTER);
      translate(300, 300);
      AGI6();
      popMatrix();
      break; 
      }  
  }
} 
